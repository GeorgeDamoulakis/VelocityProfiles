import cv2
import pandas as pd
import numpy as np
import time

################### start the clock ###################
start_time = time.time()

# Get a VideoCapture object from video and store it in vs
vc = cv2.VideoCapture("D:\\4. Tamal videos\\30pcHP\\side\\green_HP_h4_us7_1.cine")
print("==========Video Details==========")
width = vc.get(cv2.CAP_PROP_FRAME_WIDTH)  # float
height = vc.get(cv2.CAP_PROP_FRAME_HEIGHT)  # float
print('VC: width, height:', width, height)
fps = vc.get(cv2.CAP_PROP_FPS)
print('fps:', fps)  # float
frame_count = vc.get(cv2.CAP_PROP_FRAME_COUNT)
print('frames count:', frame_count)  # float
print("=================================")



# Read first frame
ret, first_frame = vc.read()
# Scale and resize image
resize_dim = 600
max_dim = max(first_frame.shape)
scale = resize_dim / max_dim
first_frame = cv2.resize(first_frame, None, fx=scale, fy=scale)
print("size of resized first frame is : ", first_frame.shape)
# Convert to gray scale
prev_gray = cv2.cvtColor(first_frame, cv2.COLOR_BGR2GRAY)




i=0
while ( (vc.isOpened()) and (i < frame_count-1) ):
    i = i + 1
    # Read a frame from video
    ret, frame = vc.read()
    # Convert new frame format`s to gray scale and resize gray frame obtained
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.resize(gray, None, fx=scale, fy=scale)
    th, im_th = cv2.threshold(gray, 70, 255, cv2.THRESH_BINARY_INV);
    edges = cv2.Canny(im_th, 100, 100, apertureSize=3)
    result = np.hstack((im_th, edges))


    def CC(img):
        nlabels, labels, stats, centroids = cv2.connectedComponentsWithStats(img)
        label_hue = np.uint8(179 * labels / np.max(labels))
        blank_ch = 255 * np.ones_like(label_hue)
        labeled_img = cv2.merge([label_hue, blank_ch, blank_ch])
        labeled_img = cv2.cvtColor(labeled_img, cv2.COLOR_HSV2BGR)
        labeled_img[label_hue == 0] = 0
        return labeled_img, nlabels, labels, stats, centroids


    kernel = np.ones((2, 2), np.uint8)
    erosion = cv2.erode(im_th, kernel, iterations=4)
    dilation = cv2.dilate(erosion, kernel, iterations=2)
    components, nlabels, labels, stats, centroids = CC(dilation)


    #cv2.imshow("  ", components)
    #cv2.waitKey()
    #cv2.destroyAllWindows()
    print("=============PRINTOUTS FRAME--------------- ", i)
    final_stats = []
    f_stat_counter = 0
    for row in range(stats.shape[0]):
        if (stats[row][1] == 0) or (stats[row][2] < 3) or (stats[row][4] > 100):
            pass
        else:
            final_stats.append(stats[row])
            f_stat_counter = f_stat_counter + 1

    #print(f"stats from ", i, " frame are the following:")
    #print(stats)
    final_stats_array = np.array(final_stats, dtype=object)
    #print(f"the artifacts for the {i} frame are:", nlabels, " but the droplets are:", f_stat_counter)
    #print(f"the stats for {i} frame are (X, Y, horizontal, vertical, area) are:")
    print("final stats ", final_stats_array)



    Perimeter = []  # in pixels
    Area = []  # in pixels

    for row in range(len(final_stats)):
        crop_img = im_th[
                   (final_stats[row][1] - 5):(final_stats[row][1] + final_stats[row][3]),
                   (final_stats[row][0] - 5):(final_stats[row][0] + final_stats[row][2])
                   ]
        crop_img_edges = edges[
                         (final_stats[row][1] - 5):(final_stats[row][1] + final_stats[row][3]),
                         (final_stats[row][0] - 5):(final_stats[row][0] + final_stats[row][2])
                         ]
        #print(crop_img)
        if crop_img.any():
            l1 = len(crop_img)
            l2 = len(crop_img[1])
        else:
            break

        white_pixels = 0
        white_pixels_edges = 0
        for ii in range(l1):
            for jj in range(l2):
                if crop_img[ii][jj] == 255:
                    white_pixels += 1
                if crop_img_edges[ii][jj] == 255:
                    white_pixels_edges += 1

        Perimeter.append(white_pixels_edges)
        Area.append(white_pixels)

    Area_array = np.array(Area)
    Perimeter_array = np.array(Perimeter)
    Final_stats_array = np.array(final_stats)



    if Perimeter_array.any():
        pass
    else:
        Perimeter_array=[0]

    final_matrix = np.empty((Final_stats_array.shape[0], 6), np.uint8)

    for row in range(Final_stats_array.shape[0]):
        final_matrix[row][0] = Final_stats_array[row][0]
        final_matrix[row][1] = Final_stats_array[row][1]
        final_matrix[row][2] = Final_stats_array[row][2]
        final_matrix[row][3] = Final_stats_array[row][3]
        final_matrix[row][4] = Perimeter_array[row]
        final_matrix[row][5] = Area_array[row]

    #print("the ULTIMATE FINAL MATRIX is ", final_matrix)


    my_df = pd.DataFrame(final_matrix)
    #image_counter = image_counter + 1
    my_df.to_csv(f' TIF_to_CSV_from_ {i}_frame.csv', header=False, index=False)  # save as csv
    print(f"the {i} frame printed =============-------------=================")

print("--- %s seconds ---" % (time.time() - start_time))
